setup_xl_base: &setup_xl_base
  working_directory: ~/glow
  docker:
    - image: cimg/openjdk:8.0.322
  resource_class: xlarge

setup_m_base: &setup_m_base
  working_directory: ~/glow
  docker:
    - image: cimg/openjdk:8.0.322
  resource_class: medium+

install_conda: &install_conda
  run:
    name: Install conda
    command: |
      if [ ! -d "/home/circleci/conda" ]; then
        wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh
        /bin/bash Miniconda3-py37_4.8.3-Linux-x86_64.sh -b -p $HOME/conda
      else
        echo "Conda already installed"
      fi

create_python_env: &create_python_env
  run:
    name: Create conda environment for Python dependencies
    command: |
      if [ ! -d "/home/circleci/conda/envs/glow" ]; then
        export PATH=$HOME/conda/bin:$PATH
        conda env create -f python/environment.yml
      fi

create_docs_env: &create_docs_env
  run:
    name: Create minimal conda environment for docs dependencies
    command: |
      if [ ! -d "/home/circleci/conda/envs/glow-docs" ]; then
        export PATH=$HOME/conda/bin:$PATH
        conda env create -f docs/source/environment.yml
      fi

check_clean_repo: &check_clean_repo
  run:
    name: Verify that repo is clean
    environment:
    command: |
      if [[ -n $(git status --short) ]]; then
        echo "Working directory was not clean!"
        git status
        false
      else
        true
      fi


version: 2.1
orbs:
  codecov: codecov/codecov@3.2.2
  jq: circleci/jq@2.2.0
jobs:

  check-docs:
    <<: *setup_m_base
    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-deps-v1-{{ checksum "python/environment.yml" }}-{{ checksum "docs/source/environment.yml" }}
      - *install_conda
      - *create_python_env
      - *create_docs_env
      - save_cache:
          paths:
            - /home/circleci/conda
          key: conda-deps-v1-{{ checksum "python/environment.yml" }}-{{ checksum "docs/source/environment.yml" }}
      - run:
          name: Check docs links
          environment:
          command: |
            export PATH=$HOME/conda/envs/glow-docs/bin:$PATH
            cd docs
            make linkcheck
      - run:
          name: Configure Databricks CLI
          command: |
            printf "[docs-ci]\nhost = https://adb-984752964297111.11.azuredatabricks.net\ntoken = ${DATABRICKS_API_TOKEN}\njobs-api-version = 2.1\n" > ~/.databrickscfg
      - run:
          name: Generate notebook source files
          command: |
            export PATH=$HOME/conda/envs/glow/bin:$PATH
            for f in $(find docs/source/_static/notebooks -type f -name '*.html'); do
                python docs/dev/gen-nb-src.py --html "${f}" --cli-profile docs-ci
            done
      - *check_clean_repo

  spark-3-tests:
    <<: *setup_xl_base
    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-deps-v1-{{ checksum "python/environment.yml" }}
      - *install_conda
      - *create_python_env
      - save_cache:
          paths:
            - /home/circleci/conda
          key: conda-deps-v1-{{ checksum "python/environment.yml" }}
      - run:
          name: Run Scala tests
          environment:
          command: |
            export PATH=$HOME/conda/envs/glow/bin:$PATH
            export SPARK_VERSION="3.2.1"
            export SCALA_VERSION="2.12.8"
            sbt core/test exit
      - run:
          name: Run docs tests
          no_output_timeout: 30m
          environment:
          command: |
            export PATH=$HOME/conda/envs/glow/bin:$PATH
            export SPARK_VERSION="3.2.1"
            export SCALA_VERSION="2.12.8"
            sbt docs/test exit
      - run:
          name: Run Hail on Spark3 tests
          environment:
          command: |
            export PATH=$HOME/conda/envs/glow/bin:$HOME/conda/bin:$PATH
            export SPARK_VERSION="3.2.1"
            export SCALA_VERSION="2.12.8"
            export HAIL_VERSION="0.2.89"
            sudo apt-get update
            sudo apt-get -y install rsync
            sbt installHail hail/test uninstallHail exit
      - run:
          name: Run Python tests
          no_output_timeout: 90m
          environment:
          command: |
            export PATH=$HOME/conda/envs/glow/bin:$PATH
            export SPARK_VERSION="3.2.1"
            export SCALA_VERSION="2.12.8"
            sbt python/test exit
      - *check_clean_repo
      - store_artifacts:
          path: ~/glow/unit-tests.log
          destination: unit-tests.log
      - store_test_results:
          path: ~/glow/core/target/scala-2.12/test-reports

  all-notebook-tests:
    <<: *setup_m_base
    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-deps-v1-{{ checksum "python/environment.yml" }}
      - *install_conda
      - *create_python_env
      - save_cache:
          paths:
            - /home/circleci/conda
          key: conda-deps-v1-{{ checksum "python/environment.yml" }}
      - run:
          name: Configure Databricks CLI
          command: |
            printf "[docs-ci]\nhost = https://adb-984752964297111.11.azuredatabricks.net\ntoken = ${DATABRICKS_API_TOKEN}\njobs-api-version = 2.1\n" > ~/.databrickscfg
      - run:
          name: Run all notebook tests
          command: |
            export PATH=$HOME/conda/envs/glow/bin:$PATH
            if [[ ! -z $CIRCLE_PULL_REQUEST ]]; then
              echo 'export repo_url=$(curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.head.repo.html_url')'>> $BASH_ENV
              echo 'export pr_branch=$(curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.head.ref')' >> $BASH_ENV
              source $BASH_ENV
              python docs/dev/run-nb-test.py --cli-profile docs-ci \
                                             --repos-url $repo_url \
                                             --branch $pr_branch \
                                             --dockerhub_password ${PROJECTGLOW_DOCKERHUB_PASSWORD}
            else
              python docs/dev/run-nb-test.py --cli-profile docs-ci \
                                             --dockerhub_password ${PROJECTGLOW_DOCKERHUB_PASSWORD}
            fi

workflows:
  version: 2
  test:
    jobs:
      - check-docs
      - spark-3-tests
      - all-notebook-tests
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - check-docs
      - spark-3-tests
      - all-notebook-tests
