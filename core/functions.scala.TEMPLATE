/*
 * Copyright 2019 The Glow Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.projectglow

import org.apache.spark.sql.Column
import org.apache.spark.sql.catalyst.expressions.{Expression, LambdaFunction, Literal, UnresolvedNamedLambdaVariable}

import io.projectglow.sql.expressions.ExpressionHelper

// scalastyle:off
// format: off

/**
 * Functions provided by Glow. These functions can be used with Spark's DataFrame API.
{% for group_name, group in groups.items() %}
 * @group {{ group_name }} {{ group['description'] }}
{% endfor %}
 */
object functions {
  private def withExpr(expr: Expression): Column = {
    new Column(ExpressionHelper.wrapAggregate(ExpressionHelper.rewrite(expr)))
  }

  private def createLambda(f: Column => Column) = {
    val x = UnresolvedNamedLambdaVariable(Seq("x"))
    val function = f(new Column(x)).expr
    LambdaFunction(function, Seq(x))
  }

  private def createLambda(f: (Column, Column) => Column) = {
    val x = UnresolvedNamedLambdaVariable(Seq("x"))
    val y = UnresolvedNamedLambdaVariable(Seq("y"))
    val function = f(new Column(x), new Column(y)).expr
    LambdaFunction(function, Seq(x, y))
  }
  {% for group_name, group in groups.items() %}
  {% for function in group.functions if not function.exclude_scala %}

  /**
   * {{ function.doc|replace("\n", "\n* ")|indent(3) }}
   * @group {{ group_name }}
   * @since {{ function.since }}
   *
{% for arg in function.args %}
   * @param {{ arg.name }} {{ arg.doc|trim|replace("\n", "\n*        ")|indent(3) }}
{% endfor %}
   * @return {{ function.returns|trim|replace("\n", "\n* ")|indent(3) }}
   */
  {% if function.args[-1].is_optional %}
  def {{ function.name }}({{ function.args|map('fmt_scala_signature')|join(', ') }}): Column = withExpr {
    new {{ function.expr_class }}({{ function.args|map('fmt_scala_call')|join(', ') }})
  }

  def {{ function.name }}({{ function.args[:-1]|map('fmt_scala_signature')|join(', ') }}): Column = withExpr {
    new {{ function.expr_class }}({{ function.args[:-1]|map('fmt_scala_call')|join(', ') }})
  }

  {% else %}
  def {{ function.name }}({{ function.args|map('fmt_scala_signature')|join(', ') }}): Column = withExpr {
    new {{ function.expr_class }}({{ function.args|map('fmt_scala_call')|join(', ') }})
  }
  {% endif %}
  {% endfor %}
  {% endfor %}
}