[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright 2019 The Glow Authors[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0m[0mdebug[0m] [0m[0m * you may not use this file except in compliance with the License.[0m
[0m[[0m[0mdebug[0m] [0m[0m * You may obtain a copy of the License at[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0m[0mdebug[0m] [0m[0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0m[0mdebug[0m] [0m[0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0m[0mdebug[0m] [0m[0m * See the License for the specific language governing permissions and[0m
[0m[[0m[0mdebug[0m] [0m[0m * limitations under the License.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage io.projectglow.sql;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.spark.sql.catalyst.util.GenericArrayData;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.spark.unsafe.types.UTF8String;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class Functions {[0m
[0m[[0m[0mdebug[0m] [0m[0m    public static GenericArrayData asciiCharSplit(UTF8String str, UTF8String split) {[0m
[0m[[0m[0mdebug[0m] [0m[0m         java.util.List<UTF8String> output = new java.util.ArrayList<>();[0m
[0m[[0m[0mdebug[0m] [0m[0m         int start = 0;[0m
[0m[[0m[0mdebug[0m] [0m[0m         byte c = split.getBytes()[0];[0m
[0m[[0m[0mdebug[0m] [0m[0m         byte[] bytes = str.getBytes();[0m
[0m[[0m[0mdebug[0m] [0m[0m         for (int i = 0; i < bytes.length; i++) {[0m
[0m[[0m[0mdebug[0m] [0m[0m           if (bytes[i] == c) {[0m
[0m[[0m[0mdebug[0m] [0m[0m             output.add(UTF8String.fromBytes(bytes, start, i - start));[0m
[0m[[0m[0mdebug[0m] [0m[0m             start = i + 1;[0m
[0m[[0m[0mdebug[0m] [0m[0m           }[0m
[0m[[0m[0mdebug[0m] [0m[0m         }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m         output.add(UTF8String.fromBytes(bytes, start, bytes.length - start));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m         return new GenericArrayData(output.toArray());[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
