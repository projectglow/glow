package io.projectglow.sql.util

import java.util

import org.apache.spark.sql.catalyst.util.GenericArrayData
import org.apache.spark.unsafe.types.UTF8String

/**
 * Functions to be called from inside expression codegen. Defining the functions here
 * can reduce the size of the generated bytecode.
 */
object CodegenUtils {
  def asciiCharSplit(str: UTF8String, split: UTF8String): GenericArrayData = {
    val output = new util.ArrayList[UTF8String]
    val byteBuffer = str.getByteBuffer
    val bytes = byteBuffer.array()
    var start = byteBuffer.position()
    val splitByteBuffer = split.getByteBuffer
    val c = splitByteBuffer.array()(splitByteBuffer.position())
    var i = start
    while (i < byteBuffer.limit()) {
      if (bytes(i) == c) {
        output.add(UTF8String.fromBytes(bytes, start, i - start))
        start = i + 1
      }
      i += 1
    }

    output.add(UTF8String.fromBytes(bytes, start, byteBuffer.limit() - start))
    new GenericArrayData(output.toArray.asInstanceOf[Array[Any]])
  }
}
